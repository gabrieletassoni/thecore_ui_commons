name: Ruby Gem

on: push

jobs:
  build:
    name: Build + Publish
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    # Check the version if it already exists as a tag, if so set a variable to use as a condition in order 
    # to skip next steps without failing the job, using Env File to store the variable
    - name: Check if version already exists
      id: check_version
      run: |
        version=$(grep -oP 'VERSION = "\K[^"]+' lib/*/version.rb | awk -F'.' '{print $1"."$2"."$3}')
        git fetch --unshallow --tags
        echo $?
        if git tag --list | grep -q $version;
        then
          echo "Version $version already exists"
          echo "version_exists=true" >> "$GITHUB_ENV"
        else
          echo "Version $version does not exist"
          echo "version_exists=false" >> "$GITHUB_ENV"
        fi
    # If the version already exists, skip the next steps
    - uses: ruby/setup-ruby@v1
      if: env.version_exists == 'false'
      with:
        ruby-version: '3' # Not needed with a .ruby-version file
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically
    # sets the git tag to the same version as the gem
    - name: Set git tag
      if: env.version_exists == 'false'
      run: |
        git config --local user.email "noreply@alchemic.it"
        git config --local user.name "AlchemicIT"
        version=$(grep -oP 'VERSION = "\K[^"]+' lib/*/version.rb | awk -F'.' '{print $1"."$2"."$3}')
        git tag -a $version -m "Version $version"
        git push --tags
        
    - name: Publish to RubyGems
      if: env.version_exists == 'false'
      run: |
        mkdir -p $HOME/.gem
        touch $HOME/.gem/credentials
        chmod 0600 $HOME/.gem/credentials
        printf -- "---\n:rubygems_api_key: ${GEM_HOST_API_KEY}\n" > $HOME/.gem/credentials
        gem build *.gemspec
        gem push *.gem
      env:
        GEM_HOST_API_KEY: ${{secrets.RUBYGEMS_AUTH_TOKEN}}